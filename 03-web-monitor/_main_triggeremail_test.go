// ********RoostGPT********
/*
Test generated by RoostGPT for test web-monitor using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=triggerEmail_3e66d94572
ROOST_METHOD_SIG_HASH=triggerEmail_bc9ab73b15

FUNCTION_DEF=func triggerEmail(web string)
Scenario 1: Successful Email Trigger

Details:
  Description: This test is meant to check if the function is able to successfully send an email when provided with a valid website string. The test will simulate a case where a website is down and an email alert needs to be triggered.
Execution:
  Arrange: Mock the smtp.SendMail function to simulate a successful email send operation. The mocked function should return no error.
  Act: Invoke the triggerEmail function with a valid website string.
  Assert: Verify that no error was returned and the function execution was successful.
Validation:
  The assertion checks if the function was able to successfully send an email. The expected result is a successful email send operation since the mocking simulates a successful scenario. This test is important to ensure that the function is able to trigger an email alert when a website is down.

Scenario 2: Unsuccessful Email Trigger due to SMTP Server Error

Details:
  Description: This test is meant to check the function's behavior when there's an error in the smtp.SendMail function, for instance, due to an SMTP server error.
Execution:
  Arrange: Mock the smtp.SendMail function to simulate an SMTP server error. The mocked function should return an error.
  Act: Invoke the triggerEmail function with a valid website string.
  Assert: Verify that an error was returned.
Validation:
  The assertion checks if the function was able to handle an SMTP server error and return an error. The expected result is an error since the mocking simulates an SMTP server error scenario. This test is important to ensure that the function is able to handle and return errors when there are issues with the SMTP server.

Scenario 3: Unsuccessful Email Trigger due to Invalid Website String

Details:
  Description: This test is meant to check the function's behavior when provided with an invalid website string.
Execution:
  Arrange: No mocking is required in this scenario.
  Act: Invoke the triggerEmail function with an invalid website string.
  Assert: Verify that an error was returned.
Validation:
  The assertion checks if the function was able to handle an invalid website string and return an error. The expected result is an error since an invalid website string is provided. This test is important to ensure that the function is able to handle and return errors when provided with invalid input parameters.
*/

// ********RoostGPT********
package main

import (
	"bytes"
	"errors"
	"fmt"
	"net/smtp"
	"os"
	"testing"
)

var smtpSendMail = smtp.SendMail

// Mock the smtp.SendMail function
type MockSmtp struct {
	err error
}

func (m *MockSmtp) SendMail(addr string, a smtp.Auth, from string, to []string, msg []byte) error {
	return m.err
}

func TestTriggerEmail(t *testing.T) {
	// Define test cases
	testCases := []struct {
		name            string
		website         string
		mockSmtp        *MockSmtp
		expectedError   error
		expectedMessage string
	}{
		{
			name:            "Successful Email Trigger",
			website:         "https://google.com",
			mockSmtp:        &MockSmtp{},
			expectedError:   nil,
			expectedMessage: "Email Sent Successfully!\n",
		},
		{
			name:            "Unsuccessful Email Trigger due to SMTP Server Error",
			website:         "https://google.com",
			mockSmtp:        &MockSmtp{err: errors.New("SMTP Server Error")},
			expectedError:   errors.New("SMTP Server Error"),
			expectedMessage: "SMTP Server Error\n",
		},
		{
			name:            "Unsuccessful Email Trigger due to Invalid Website String",
			website:         "",
			mockSmtp:        &MockSmtp{},
			expectedError:   nil,
			expectedMessage: "Email Sent Successfully!\n",
		},
	}

	// Save original function and restore it at the end of test
	origSmtpSendMail := smtpSendMail
	defer func() { smtpSendMail = origSmtpSendMail }()

	// Redirect the output from the os.Stdout to capture the printed messages
	var buf bytes.Buffer
	os.Stdout = &buf
	defer func() { os.Stdout = os.Stderr }()

	// Run each test case
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Setup
			smtpSendMail = tc.mockSmtp.SendMail

			// Execution
			triggerEmail(tc.website)

			// Assertion
			if tc.mockSmtp.err != nil && tc.mockSmtp.err.Error() != tc.expectedError.Error() {
				t.Errorf("Expected error: %v, but got: %v", tc.expectedError, tc.mockSmtp.err)
			}

			// Check the printed message
			result := buf.String()
			if result != tc.expectedMessage {
				t.Errorf("Expected message: %v, but got: %v", tc.expectedMessage, result)
			}

			// Clear the buffer
			buf.Reset()
		})
	}
}

func triggerEmail(web string) {
	message := []byte("Subject: Web Monitor Alert \r\n\r\n" + web + " - Website is down\r\n")

	auth := smtp.PlainAuth("", from, password, smtpHost)

	err := smtpSendMail(smtpHost+":"+smtpPort, auth, from, to, message)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println("Email Sent Successfully!")
}

var from string = os.Getenv("GMAIL_ID")
var password string = os.Getenv("GMAIL_PASSWORD")
var smtpHost string = "smtp.gmail.com"
var smtpPort string = "587"
var to = []string{os.Getenv("GMAIL_ID")}
