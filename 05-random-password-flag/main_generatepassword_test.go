
// ********RoostGPT********
/*
Test generated by RoostGPT for test Random-pass using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=generatePassword_3e4da6f783
ROOST_METHOD_SIG_HASH=generatePassword_480438203e

FUNCTION_DEF=func generatePassword(passwordLength int, minSpecialChar int, minUpperChar int, minNumberChar int) string
Scenario 1: Normal operation with valid parameters

Details:
  Description: This test is meant to check if the function generates a password of the correct length and with the correct number of special, upper case, and number characters when provided with valid parameters.
Execution:
  Arrange: No setup is required as the function does not depend on any external state.
  Act: Invoke the function with a password length of 10, minimum special characters of 2, minimum upper case characters of 2, and minimum number characters of 2.
  Assert: Use Go's len function to verify that the length of the returned password is 10. Use Go's strings.Count function to verify that the number of special, upper case, and number characters in the password are at least 2.
Validation:
  The choice of assertion is based on the function's requirement to generate a password of a specific length and with a specific number of character types. This test is important to ensure that the function correctly generates passwords according to the provided parameters.

Scenario 2: Edge case with password length equal to the sum of minimum characters

Details:
  Description: This test is meant to check if the function generates a password of the correct length and with the correct number of special, upper case, and number characters when the password length is equal to the sum of the minimum characters.
Execution:
  Arrange: No setup is required as the function does not depend on any external state.
  Act: Invoke the function with a password length of 6, minimum special characters of 2, minimum upper case characters of 2, and minimum number characters of 2.
  Assert: Use Go's len function to verify that the length of the returned password is 6. Use Go's strings.Count function to verify that the number of special, upper case, and number characters in the password are exactly 2.
Validation:
  The choice of assertion is based on the function's requirement to generate a password of a specific length and with a specific number of character types. This test is important to ensure that the function correctly generates passwords when the password length is equal to the sum of the minimum characters.

Scenario 3: Error handling with password length less than the sum of minimum characters

Details:
  Description: This test is meant to check if the function handles errors correctly when the password length is less than the sum of the minimum characters.
Execution:
  Arrange: No setup is required as the function does not depend on any external state.
  Act: Invoke the function with a password length of 5, minimum special characters of 2, minimum upper case characters of 2, and minimum number characters of 2.
  Assert: Use Go's len function to verify that the length of the returned password is 5. Use Go's strings.Count function to verify that the number of special, upper case, and number characters in the password are less than or equal to 2.
Validation:
  The choice of assertion is based on the function's requirement to generate a password of a specific length and with a specific number of character types. This test is important to ensure that the function correctly handles errors when the password length is less than the sum of the minimum characters.

roost_feedback [2/7/2025, 4:18:21 AM]:Remove comments from source code
*/

// ********RoostGPT********

package random_password

import (
	"math/rand"
	"strings"
	"testing"
	"time"
)

const (
	specialCharSet = "!@#$%^&*()"
	numberCharSet  = "0123456789"
	lowerCharSet   = "abcdefghijklmnopqrstuvwxyz"
	upperCharSet   = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
)

func generatePassword(passwordLength int, minSpecialChar int, minUpperChar int, minNumberChar int) string {
	rand.Seed(time.Now().UnixNano())
	var password strings.Builder
	password.Grow(passwordLength)

	generateRandomChars := func(charSet string, length int) {
		for i := 0; i < length; i++ {
			random := rand.Intn(len(charSet))
			password.WriteString(string(charSet[random]))
		}
	}

	generateRandomChars(specialCharSet, minSpecialChar)
	generateRandomChars(upperCharSet, minUpperChar)
	generateRandomChars(numberCharSet, minNumberChar)

	totalCharLenWithoutLowerChar := minUpperChar + minSpecialChar + minNumberChar
	remainingCharLen := passwordLength - totalCharLenWithoutLowerChar
	generateRandomChars(lowerCharSet, remainingCharLen)

	passwordRune := []rune(password.String())
	rand.Shuffle(len(passwordRune), func(i, j int) {
		passwordRune[i], passwordRune[j] = passwordRune[j], passwordRune[i]
	})

	return string(passwordRune)
}

func TestGeneratePassword(t *testing.T) {
	testCases := []struct {
		name             string
		passwordLength   int
		minSpecialChar   int
		minUpperChar     int
		minNumberChar    int
	}{
		{
			name:           "Normal operation with valid parameters",
			passwordLength: 10,
			minSpecialChar: 2,
			minUpperChar:   2,
			minNumberChar:  2,
		},
		{
			name:           "Edge case with password length equal to the sum of minimum characters",
			passwordLength: 6,
			minSpecialChar: 2,
			minUpperChar:   2,
			minNumberChar:  2,
		},
		{
			name:           "Error handling with password length less than the sum of minimum characters",
			passwordLength: 5,
			minSpecialChar: 2,
			minUpperChar:   2,
			minNumberChar:  2,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			password := generatePassword(tc.passwordLength, tc.minSpecialChar, tc.minUpperChar, tc.minNumberChar)

			if len(password) != tc.passwordLength {
				t.Errorf("Expected password length of %d, but got %d", tc.passwordLength, len(password))
			}

			specialCharCount := strings.Count(password, specialCharSet)
			if specialCharCount < tc.minSpecialChar {
				t.Errorf("Expected at least %d special characters, but got %d", tc.minSpecialChar, specialCharCount)
			}

			upperCharCount := strings.Count(password, upperCharSet)
			if upperCharCount < tc.minUpperChar {
				t.Errorf("Expected at least %d upper case characters, but got %d", tc.minUpperChar, upperCharCount)
			}

			numberCharCount := strings.Count(password, numberCharSet)
			if numberCharCount < tc.minNumberChar {
				t.Errorf("Expected at least %d number characters, but got %d", tc.minNumberChar, numberCharCount)
			}

			t.Logf("Generated password: %s", password)
		})
	}
}
