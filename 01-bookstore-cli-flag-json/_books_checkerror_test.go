// ********RoostGPT********
/*
Test generated by RoostGPT for test Golang-Bookstore using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=checkError_e75f941bf5
ROOST_METHOD_SIG_HASH=checkError_e49b9fc736

FUNCTION_DEF=func checkError(err error)
Scenario 1: Error is Nil
Details:
    Description: This test is meant to check the function checkError when the parameter err is nil. It is expected that the function would not print any error message or terminate the program.
Execution:
    Arrange: No arrangement is necessary for this test as we are directly passing nil as parameter.
    Act: Invoke the function checkError with err set to nil.
    Assert: Check if the function does not print any error message and does not terminate the program.
Validation:
    The assertion is checking if the function behaves as expected when no error is present. This test is important as it verifies the function's behavior in normal operation.

Scenario 2: Error is Not Nil
Details:
    Description: This test is meant to check the function checkError when the parameter err is not nil. It is expected that the function would print an error message and terminate the program.
Execution:
    Arrange: Create a new instance of error.
    Act: Invoke the function checkError with err set to the new error instance.
    Assert: Check if the function prints the correct error message and terminates the program.
Validation:
    The assertion is checking if the function behaves as expected when an error is present. This test is important as it verifies the function's behavior in an error scenario.

Scenario 3: Error with Custom Message
Details:
    Description: This test is meant to check the function checkError when the parameter err is not nil and contains a custom message. It is expected that the function would print the custom error message and terminate the program.
Execution:
    Arrange: Create a new instance of error with a custom message.
    Act: Invoke the function checkError with err set to the new error instance.
    Assert: Check if the function prints the correct custom error message and terminates the program.
Validation:
    The assertion is checking if the function behaves as expected when an error with a custom message is present. This test is important as it verifies the function's ability to handle different types of errors.
*/

// ********RoostGPT********
package main

import (
	"bytes"
	"errors"
	"os"
	"testing"
)

// TestCheckError is a unit test for checkError function
func TestCheckError(t *testing.T) {
	// Define test cases
	testCases := []struct {
		name        string
		err         error
		expectedOut string
	}{
		{
			name:        "Error is Nil",
			err:         nil,
			expectedOut: "",
		},
		{
			name:        "Error is Not Nil",
			err:         errors.New("test error"),
			expectedOut: "Error Happened test error\n",
		},
		{
			name:        "Error with Custom Message",
			err:         errors.New("custom error"),
			expectedOut: "Error Happened custom error\n",
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Capture the output of checkError
			var buf bytes.Buffer
			os.Stdout = &buf
			defer func() {
				os.Stdout = os.NewFile(uintptr(os.Stdout.Fd()), "/dev/stdout")
			}()

			// Call the function
			if tc.err != nil {
				defer func() {
					if r := recover(); r == nil {
						t.Errorf("The code did not panic")
					}
				}()
			}
			checkError(tc.err)

			// Check the output
			if buf.String() != tc.expectedOut {
				t.Errorf("Expected output '%s', but got '%s'", tc.expectedOut, buf.String())
			}
		})
	}
}

func checkError(err error) {
	if err != nil {
		os.Stderr.WriteString("Error Happened " + err.Error() + "\n")
		os.Exit(1)
	}
}
