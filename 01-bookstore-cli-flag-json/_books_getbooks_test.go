// ********RoostGPT********
/*
Test generated by RoostGPT for test golang-bookstore using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=getBooks_a2efc8dddf
ROOST_METHOD_SIG_HASH=getBooks_da8682697f

FUNCTION_DEF=func getBooks() (books []Book)
Scenario 1: Successful Reading and Unmarshalling of Books Data

Details:
    Description: This test is meant to check if the getBooks function can successfully read the "books.json" file and unmarshal the data into the Book struct. The target scenario is when the "books.json" file exists and contains valid data.
Execution:
    Arrange: Create a mock "books.json" file in the test directory with valid book data.
    Act: Invoke the getBooks function.
    Assert: Use Go testing facilities to verify that the returned data matches the data in the mock "books.json" file.
Validation:
    The choice of assertion is to check if the returned data matches the expected data. The logic behind the expected result is that the function should correctly read and unmarshal the data from the "books.json" file. This test is important as it ensures that the application can correctly read and process book data.

Scenario 2: Error in Reading Books Data

Details:
    Description: This test is meant to check if the getBooks function can handle errors when reading the "books.json" file. The target scenario is when the "books.json" file does not exist.
Execution:
    Arrange: Ensure that the "books.json" file does not exist in the test directory.
    Act: Invoke the getBooks function.
    Assert: Use Go testing facilities to verify that an error is returned when trying to read the "books.json" file.
Validation:
    The choice of assertion is to check if an error is returned. The logic behind the expected result is that the function should return an error when it cannot read the "books.json" file. This test is important as it ensures that the application can gracefully handle errors when reading book data.

Scenario 3: Error in Unmarshalling Books Data

Details:
    Description: This test is meant to check if the getBooks function can handle errors when unmarshalling the data from the "books.json" file. The target scenario is when the "books.json" file contains invalid data.
Execution:
    Arrange: Create a mock "books.json" file in the test directory with invalid book data.
    Act: Invoke the getBooks function.
    Assert: Use Go testing facilities to verify that an error is returned when trying to unmarshal the data from the "books.json" file.
Validation:
    The choice of assertion is to check if an error is returned. The logic behind the expected result is that the function should return an error when it cannot unmarshal the data from the "books.json" file. This test is important as it ensures that the application can gracefully handle errors when processing book data.
*/

// ********RoostGPT********
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"testing"
)

type Book struct {
	Id       string `json:"id"`
	Title    string `json:"title"`
	Author   string `json:"author"`
	Price    string `json:"price"`
	Imageurl string `json:"image_url"`
}

type readFileFunc func(filename string) ([]byte, error)

func getBooks(readFile readFileFunc) (books []Book) {
	booksBytes, err := readFile("./books.json")
	checkError(err)

	err = json.Unmarshal(booksBytes, &books)
	checkError(err)

	return books
}

func checkError(err error) {
	if err != nil {
		fmt.Println("Error Happened ", err)
		os.Exit(1)
	}
}

func TestGetBooks(t *testing.T) {
	testCases := []struct {
		name           string
		jsonFile       string
		expectedOutput []Book
		expectError    bool
	}{
		{
			name:     "Successful Reading and Unmarshalling of Books Data",
			jsonFile: "test_data/books_valid.json",
			expectedOutput: []Book{
				{Id: "1", Title: "Book1", Author: "Author1", Price: "10.00", Imageurl: "http://image1.com"},
				{Id: "2", Title: "Book2", Author: "Author2", Price: "20.00", Imageurl: "http://image2.com"},
			},
			expectError: false,
		},
		{
			name:           "Error in Reading Books Data",
			jsonFile:       "test_data/books_not_exist.json",
			expectedOutput: nil,
			expectError:    true,
		},
		{
			name:           "Error in Unmarshalling Books Data",
			jsonFile:       "test_data/books_invalid.json",
			expectedOutput: nil,
			expectError:    true,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			mockReadFile := func(filename string) ([]byte, error) {
				if filename == "./books.json" {
					return ioutil.ReadFile(tc.jsonFile)
				}
				return nil, fmt.Errorf("unexpected filename: %s", filename)
			}

			books := getBooks(mockReadFile)

			if tc.expectError && len(books) != 0 {
				t.Errorf("Expected error but got books: %v", books)
			}
			if !tc.expectError {
				if len(books) != len(tc.expectedOutput) {
					t.Errorf("Expected books length %d but got %d", len(tc.expectedOutput), len(books))
				}
				for i, book := range books {
					if book != tc.expectedOutput[i] {
						t.Errorf("Expected book %v but got %v", tc.expectedOutput[i], book)
					}
				}
			}
		})
	}
}
